openapi: 3.0.3
info:
  title: Swagger Train RailRoad - OpenAPI 3.0
  description: |-
    This is a sample Train company Server based on the OpenAPI 3.
    The main task is to produce a full API using Node.js and Express.js. 
    
    Here is the full train endpoint documentation.
    
    A train endpoint:
      - List all trains and allow you to sort by date, starting station, end station with a limit (default limit is 10 but can be changed with a parameter).
      - Create, Read, Update, Delete trains.
      - Train is at least {id, name, start_station, end_station, time_of_departure}.
      - Only an admin can create, update and delete a train.
    
    Some useful links:
    - [The Train company repository](https://github.com/Paiile/RailRoad.git)
    
  termsOfService: http://swagger.io/terms/
  version: 1.0.11
externalDocs:
  description: Find out more about Railroad
  url: http://railroad.fr
servers:
  - url: locahost:3000/
tags:
  - name: train
    description: Everything about the trains
    externalDocs:
      description: Find out more
      url: http://swagger.io
  
paths:
  /train:
    get:
      tags:
        - train
      summary: Get the list of all trains
      description: Returns all trains
      operationId: getTrains
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Train'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Train'
        '404':
          description: Train not found
      security:
        - api_key: []
        - train_auth:
            - write:trains
            - read:trains
    
    post:
      tags:
        - train
      summary: Add a new train to the RailRoad
      description: Add a new train
      operationId: addTrain
      requestBody:
        description: Create a new train
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Train'
          application/xml:
            schema:
              $ref: '#/components/schemas/Train'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Train'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Train'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Train'
        '405':
          description: Invalid input
      security:
        - train_auth:
            - write:trains
            - read:trains
            
  /train/{trainId}:
    get:
      tags:
        - train
      summary: Find train by ID
      description: Returns a single train
      operationId: getTrainById
      parameters:
        - name: trainId
          in: path
          description: ID of train to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Train'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Train'
        '400':
          description: Invalid ID supplied
        '404':
          description: Train not found
      security:
        - api_key: []
        - train_auth:
            - write:trains
            - read:trains
    
    delete:
      tags:
        - train
      summary: Deletes a train
      description: delete a train
      operationId: deleteTrain
      parameters:
        - name: trainId
          in: path
          description: Train id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid train value
      security:
        - train_auth:
            - write:trains
            - read:trains
    put:
      tags:
        - train
      summary: Update an existing train
      description: Update an existing train by Id
      operationId: updateTrainById
      parameters:
        - name: trainId
          in: path
          description: Train id to delete
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent train 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Train'
          application/xml:
            schema:
              $ref: '#/components/schemas/Train'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Train'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Train'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Train'
        '400':
          description: Invalid ID supplied
        '404':
          description: Train not found
        '405':
          description: Validation exception
      security:
        - train_auth:
            - write:trains
            - read:trains
components:
  schemas:
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Train:
      required:
        - name
        - start_station
        - end_station
        - time_of_departure
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: TGV10
        start_station: 
          type: string
          example: Lille
        end_station: 
          type: string
          example: Paris
        time_of_departure:
          type: string
          example: 9:00
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: train status 
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Train:
      description: Train object that needs to be added 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Train'
        application/xml:
          schema:
            $ref: '#/components/schemas/Train'
  securitySchemes:
    train_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://train.swagger.io/oauth/authorize
          scopes:
            write:trains: modify trains
            read:trains: read your trains
    api_key:
      type: apiKey
      name: api_key
      in: header